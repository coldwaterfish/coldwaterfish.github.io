{"version":3,"file":"static/js/599.c753dc45.chunk.js","mappings":"oUAEA,EADmB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,2VAA+V,KAAQ,OAAQ,MAAS,Y,UCM9gBA,EAAe,SAAsBC,EAAOC,GAC9C,OAAoBC,EAAAA,cAAoBC,EAAAA,GAAUC,EAAAA,EAAAA,IAAcA,EAAAA,EAAAA,GAAc,GAAIJ,GAAQ,GAAI,CAC5FC,IAAKA,EACLI,KAAMC,MAIVP,EAAaQ,YAAc,eAC3B,MAA4BL,EAAAA,WAAiBH,G,mGC6H7C,GAAeS,EAAAA,EAAAA,OAAKC,EAAAA,EAAAA,IAAQC,EAAAA,GAAkBC,EAAAA,EAA1BF,EA3HW,SAAC,GAAgC,EAA9BG,KAA+B,IAAzBC,EAAwB,EAAxBA,WACtC,EAAe,cAARC,GAAP,eACA,GAA0BC,EAAAA,EAAAA,GAAgBC,EAAAA,GAA1C,eAAcC,GAAd,WACMC,GAAWC,EAAAA,EAAAA,MAGXC,EAAU,mCAAG,WAAOC,GAAP,8FACTC,EAAiCD,EAAjCC,SAAUC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SADX,UAEDC,EAAAA,EAAAA,IAAYH,EAAUC,GAFrB,QAEbG,EAFa,SAGNA,EAAIC,KAAKC,UAAW,EACOF,EAAIC,KAAKC,SAArCC,EADoB,EACpBA,MAAOC,EADa,EACbA,MAAOC,EADM,EACNA,IAAKC,EADC,EACDA,KAGzBf,EADEO,EACOM,EAEA,MAIXjB,EAAW,CAAES,SAAAA,EAAUC,SAAAA,EAAUM,MAAAA,EAAOE,IAAAA,EAAKC,KAAAA,IAG7CC,EAAA,WAAgB,4BAGhBf,EAAS,MAETe,EAAA,SAAc,oDArBC,2CAAH,sDA0BhB,OACE,iBAAKC,UAAU,QAAf,WACE,iBAAKA,UAAU,YAAf,WACE,gBAAKA,UAAU,UAAf,kCACA,gBAAKA,UAAU,cACf,gBAAKA,UAAU,eACf,gBAAKA,UAAU,iBAEjB,gBAAKA,UAAU,aAAf,UACE,eACEC,KAAK,eACLD,UAAU,aACVE,cAAe,CAAEZ,UAAU,GAC3Ba,SAAUjB,EACVN,KAAMA,EALR,WAOE,mBACEqB,KAAK,WACLG,MAAO,CACL,CACEC,UAAU,EACVN,QAAS,wCAGX,CACEO,QAAS,qBACTP,QAAS,wDAGbQ,aAAW,EAbb,UAeE,cACEC,QAAQ,SAACC,EAAA,EAAD,CAAcT,UAAU,wBAChCU,YAAY,gBAIhB,mBACET,KAAK,WACLG,MAAO,CACL,CACEC,UAAU,EACVN,QAAS,kCAGX,CACEY,UAAW,SAACC,EAAGC,GACb,OAAIA,EAAMC,QAAU,GAAKD,EAAMC,QAAU,GAChCC,QAAQC,UAERD,QAAQE,OAAO,2DAK9BV,aAAW,EAlBb,UAoBE,uBACEC,QAAQ,SAAC,EAAD,CAAcR,UAAU,wBAChCkB,KAAK,WACLR,YAAY,gBAGhB,+BACE,mBAAWT,KAAK,WAAWkB,cAAc,UAAUC,SAAO,EAA1D,UACE,cAAUC,MAAO,CAAEC,MAAO,SAA1B,qDAGF,cAAGtB,UAAU,oBAAoBuB,KAAK,GAAtC,4CAKF,+BACE,cACEL,KAAK,UACLM,SAAS,SACTxB,UAAU,oBAHZ,4BAOA,SAAC,KAAD,CAAMyB,GAAG,YAAYzB,UAAU,aAA/B","sources":["../node_modules/@ant-design/icons-svg/es/asn/LockOutlined.js","../node_modules/@ant-design/icons/es/icons/LockOutlined.js","pages/login/index.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar LockOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z\" } }] }, \"name\": \"lock\", \"theme\": \"outlined\" };\nexport default LockOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LockOutlinedSvg from \"@ant-design/icons-svg/es/asn/LockOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LockOutlined = function LockOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LockOutlinedSvg\n  }));\n};\n\nLockOutlined.displayName = 'LockOutlined';\nexport default /*#__PURE__*/React.forwardRef(LockOutlined);","import { Form, Input, Checkbox, Button, message } from \"antd\";\r\nimport \"./index.less\";\r\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { handleLogin } from \"api\";\r\nimport useLocalStorage from \"utils/local-storage/useLocalStorage\";\r\nimport { TOKEN_KEY } from \"utils/local-storage\";\r\nimport { memo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { userDispatchToProps, userStateToProps } from \"store/actions/user.a\";\r\nimport { userType } from \"store/reducers/user.r\";\r\n\r\nexport type Props = {\r\n  user: userType;\r\n  userUpdate: (user: userType) => void;\r\n};\r\nconst Login: React.FC<Props> = ({ user, userUpdate }: Props) => {\r\n  const [form] = Form.useForm();\r\n  const [token, setToken] = useLocalStorage(TOKEN_KEY);\r\n  const navigate = useNavigate();\r\n\r\n  // 提交表单\r\n  const submitForm = async (values: any) => {\r\n    const { username, password, remember } = values;\r\n    let res = await handleLogin(username, password);\r\n    if (res && res.data.userInfo) {\r\n      const { email, token, tel, role } = res.data.userInfo;\r\n      // token\r\n      if (remember) {\r\n        setToken(token);\r\n      } else {\r\n        setToken(null);\r\n      }\r\n      // user_store\r\n\r\n      userUpdate({ username, password, email, tel, role });\r\n\r\n      // message\r\n      message.success(\"登录成功\");\r\n\r\n      // 跳转\r\n      navigate(\"/\");\r\n    } else {\r\n      message.error(\"用户名或密码错误\");\r\n    }\r\n  };\r\n\r\n  // 页面\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login-top\">\r\n        <div className=\"welcome\">Welcome To Coldfish</div>\r\n        <div className=\"triangle\"></div>\r\n        <div className=\"rectangle\"></div>\r\n        <div className=\"circular\"></div>\r\n      </div>\r\n      <div className=\"login-form\">\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={submitForm}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"请输入用户名\",\r\n              },\r\n              // 声明式表单验证，正则\r\n              {\r\n                pattern: /^[A-Za-z\\d_]{3,8}$/,\r\n                message: \"3-8个字母数字下划线\",\r\n              },\r\n            ]}\r\n            hasFeedback\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Username\"\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"请输入密码\",\r\n              },\r\n              // validator自定义式验证\r\n              {\r\n                validator: (_, value) => {\r\n                  if (value.length >= 6 && value.length <= 10) {\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.reject(\"密码长度必须是6~10位\");\r\n                  }\r\n                },\r\n              },\r\n            ]}\r\n            hasFeedback\r\n          >\r\n            <Input.Password\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n              <Checkbox style={{ color: \"white\" }}>记住登录状态</Checkbox>\r\n            </Form.Item>\r\n\r\n            <a className=\"login-form-forgot\" href=\"\">\r\n              忘记密码 ?\r\n            </a>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n            >\r\n              登 录\r\n            </Button>\r\n            <Link to=\"/register\" className=\"toRegister\">\r\n              现在注册?\r\n            </Link>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(connect(userStateToProps, userDispatchToProps)(Login));\r\n"],"names":["LockOutlined","props","ref","React","AntdIcon","_objectSpread","icon","LockOutlinedSvg","displayName","memo","connect","userStateToProps","userDispatchToProps","user","userUpdate","form","useLocalStorage","TOKEN_KEY","setToken","navigate","useNavigate","submitForm","values","username","password","remember","handleLogin","res","data","userInfo","email","token","tel","role","message","className","name","initialValues","onFinish","rules","required","pattern","hasFeedback","prefix","UserOutlined","placeholder","validator","_","value","length","Promise","resolve","reject","type","valuePropName","noStyle","style","color","href","htmlType","to"],"sourceRoot":""}